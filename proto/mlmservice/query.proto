syntax = "proto3";
package calibchain.mlmservice.mlmservice;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "mlmservice/params.proto";
import "mlmservice/user_detail.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/calibchain/mlmservice/x/mlmservice/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/calibchain/mlmservice/mlmservice/params";
  }
  // Queries a UserDetail by index.
	rpc UserDetail(QueryGetUserDetailRequest) returns (QueryGetUserDetailResponse) {
		option (google.api.http).get = "/calibchain/mlmservice/mlmservice/user_detail/{index}";
	}

	// Queries a list of UserDetail items.
	rpc UserDetailAll(QueryAllUserDetailRequest) returns (QueryAllUserDetailResponse) {
		option (google.api.http).get = "/calibchain/mlmservice/mlmservice/user_detail";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetUserDetailRequest {
	  string index = 1;

}

message QueryGetUserDetailResponse {
	UserDetail userDetail = 1 [(gogoproto.nullable) = false];
}

message QueryAllUserDetailRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllUserDetailResponse {
	repeated UserDetail userDetail = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
